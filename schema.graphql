schema {
  query: QueryRoot
}

type GeoJsonHazardMap {
  geojson: JSONString
  colour_scale: HexRgbValueMapping
}

type GriddedHazard {
  grid_id: RegionGrid
  hazard_model: String
  imt: String
  agg: String
  vs30: Float
  poe: Float

  """Acceleration values."""
  values: [Float]
  hazard_map(color_scale: String = "jet", color_scale_vmax: Float, color_scale_vmin: Float = 0, stroke_width: Float, stroke_opacity: Float, fill_opacity: Float): GeoJsonHazardMap
  grid_locations: [GriddedLocation]
}

type GriddedHazardResult {
  gridded_hazard: [GriddedHazard]
  ok: Boolean
}

type GriddedLocation {
  lat: Float
  lon: Float
  resolution: Float
  code: String
  name: String
  key: String
}

type GriddedLocationResult {
  location: GriddedLocation
  ok: Boolean
}

type HexRgbValueMapping {
  levels: [Float]
  hexrgbs: [String]
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""This is the entry point for all graphql query operations"""
type QueryRoot {
  node(
    """The ID of the object"""
    id: ID!
  ): Node

  """About this API """
  about: String
  gridded_location(lat: Float, lon: Float, resolution: Float): GriddedLocationResult
  hazard_curves(hazard_model: String, imts: [String], locs: [String], aggs: [String], vs30s: [Float], resolution: Float = 0.1): ToshiHazardCurveResult
  gridded_hazard(grid_id: RegionGrid, hazard_model_ids: [String], imts: [String], locs: [String], aggs: [String], vs30s: [Float], poes: [Float]): GriddedHazardResult
}

"""An enumeration."""
enum RegionGrid {
  NZ_0_1_NB_1_0
  NZ_0_1_NB_1_1
  NZ_0_2_NB_1_1
  WLG_0_01_nb_1_1
  WLG_0_05_nb_1_1
}

"""Represents one set of level and values for a hazard curve."""
type ToshiHazardCurve {
  """IMT levels."""
  levels: [Float]

  """Hazard values."""
  values: [Float]
}

type ToshiHazardCurveResult {
  ok: Boolean
  locations: [GriddedLocation]
  curves: [ToshiHazardResult]
}

"""All the info about a given curve."""
type ToshiHazardResult {
  hazard_model: String
  loc: String
  imt: String
  agg: String
  vs30: Float
  curve: ToshiHazardCurve
}

